// Code generated by Kitex v0.7.3. DO NOT EDIT.

package deviceservice

import (
	"context"
	device "github.com/OpenIoT-Hub/openiot-server/kitex_gen/device"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return deviceServiceServiceInfo
}

var deviceServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "DeviceService"
	handlerType := (*device.DeviceService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Ping":          kitex.NewMethodInfo(pingHandler, newDeviceServicePingArgs, newDeviceServicePingResult, false),
		"Create":        kitex.NewMethodInfo(createHandler, newDeviceServiceCreateArgs, newDeviceServiceCreateResult, false),
		"Remove":        kitex.NewMethodInfo(removeHandler, newDeviceServiceRemoveArgs, newDeviceServiceRemoveResult, false),
		"Update":        kitex.NewMethodInfo(updateHandler, newDeviceServiceUpdateArgs, newDeviceServiceUpdateResult, false),
		"GetDeviceByID": kitex.NewMethodInfo(getDeviceByIDHandler, newDeviceServiceGetDeviceByIDArgs, newDeviceServiceGetDeviceByIDResult, false),
		"ListDevice":    kitex.NewMethodInfo(listDeviceHandler, newDeviceServiceListDeviceArgs, newDeviceServiceListDeviceResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "device",
		"ServiceFilePath": `..\..\idl\device.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*device.DeviceServicePingArgs)
	realResult := result.(*device.DeviceServicePingResult)
	success, err := handler.(device.DeviceService).Ping(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDeviceServicePingArgs() interface{} {
	return device.NewDeviceServicePingArgs()
}

func newDeviceServicePingResult() interface{} {
	return device.NewDeviceServicePingResult()
}

func createHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*device.DeviceServiceCreateArgs)
	realResult := result.(*device.DeviceServiceCreateResult)
	success, err := handler.(device.DeviceService).Create(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDeviceServiceCreateArgs() interface{} {
	return device.NewDeviceServiceCreateArgs()
}

func newDeviceServiceCreateResult() interface{} {
	return device.NewDeviceServiceCreateResult()
}

func removeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*device.DeviceServiceRemoveArgs)
	realResult := result.(*device.DeviceServiceRemoveResult)
	success, err := handler.(device.DeviceService).Remove(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDeviceServiceRemoveArgs() interface{} {
	return device.NewDeviceServiceRemoveArgs()
}

func newDeviceServiceRemoveResult() interface{} {
	return device.NewDeviceServiceRemoveResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*device.DeviceServiceUpdateArgs)
	realResult := result.(*device.DeviceServiceUpdateResult)
	success, err := handler.(device.DeviceService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDeviceServiceUpdateArgs() interface{} {
	return device.NewDeviceServiceUpdateArgs()
}

func newDeviceServiceUpdateResult() interface{} {
	return device.NewDeviceServiceUpdateResult()
}

func getDeviceByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*device.DeviceServiceGetDeviceByIDArgs)
	realResult := result.(*device.DeviceServiceGetDeviceByIDResult)
	success, err := handler.(device.DeviceService).GetDeviceByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDeviceServiceGetDeviceByIDArgs() interface{} {
	return device.NewDeviceServiceGetDeviceByIDArgs()
}

func newDeviceServiceGetDeviceByIDResult() interface{} {
	return device.NewDeviceServiceGetDeviceByIDResult()
}

func listDeviceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*device.DeviceServiceListDeviceArgs)
	realResult := result.(*device.DeviceServiceListDeviceResult)
	success, err := handler.(device.DeviceService).ListDevice(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDeviceServiceListDeviceArgs() interface{} {
	return device.NewDeviceServiceListDeviceArgs()
}

func newDeviceServiceListDeviceResult() interface{} {
	return device.NewDeviceServiceListDeviceResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Ping(ctx context.Context, req *device.PingRequst) (r *device.PingResponse, err error) {
	var _args device.DeviceServicePingArgs
	_args.Req = req
	var _result device.DeviceServicePingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Create(ctx context.Context, req *device.CreateDeviceRequst) (r *device.CreateDeviceResponse, err error) {
	var _args device.DeviceServiceCreateArgs
	_args.Req = req
	var _result device.DeviceServiceCreateResult
	if err = p.c.Call(ctx, "Create", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Remove(ctx context.Context, req *device.RemoveDeviceRequst) (r *device.RemoveDeviceResponse, err error) {
	var _args device.DeviceServiceRemoveArgs
	_args.Req = req
	var _result device.DeviceServiceRemoveResult
	if err = p.c.Call(ctx, "Remove", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *device.UpdateDeviceRequst) (r *device.UpdateDeviceResponse, err error) {
	var _args device.DeviceServiceUpdateArgs
	_args.Req = req
	var _result device.DeviceServiceUpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDeviceByID(ctx context.Context, req *device.GetDeviceRequst) (r *device.GetDeviceResponse, err error) {
	var _args device.DeviceServiceGetDeviceByIDArgs
	_args.Req = req
	var _result device.DeviceServiceGetDeviceByIDResult
	if err = p.c.Call(ctx, "GetDeviceByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDevice(ctx context.Context, req *device.ListDeviceRequst) (r *device.ListDeviceResponse, err error) {
	var _args device.DeviceServiceListDeviceArgs
	_args.Req = req
	var _result device.DeviceServiceListDeviceResult
	if err = p.c.Call(ctx, "ListDevice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
