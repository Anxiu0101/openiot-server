// Code generated by Kitex v0.7.3. DO NOT EDIT.

package deviceservice

import (
	"context"
	device "github.com/OpenIoT-Hub/openiot-server/kitex_gen/device"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Ping(ctx context.Context, req *device.PingRequst, callOptions ...callopt.Option) (r *device.PingResponse, err error)
	Create(ctx context.Context, req *device.CreateDeviceRequst, callOptions ...callopt.Option) (r *device.CreateDeviceResponse, err error)
	Remove(ctx context.Context, req *device.RemoveDeviceRequst, callOptions ...callopt.Option) (r *device.RemoveDeviceResponse, err error)
	Update(ctx context.Context, req *device.UpdateDeviceRequst, callOptions ...callopt.Option) (r *device.UpdateDeviceResponse, err error)
	GetDeviceByID(ctx context.Context, req *device.GetDeviceRequst, callOptions ...callopt.Option) (r *device.GetDeviceResponse, err error)
	ListDevice(ctx context.Context, req *device.ListDeviceRequst, callOptions ...callopt.Option) (r *device.ListDeviceResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kDeviceServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kDeviceServiceClient struct {
	*kClient
}

func (p *kDeviceServiceClient) Ping(ctx context.Context, req *device.PingRequst, callOptions ...callopt.Option) (r *device.PingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Ping(ctx, req)
}

func (p *kDeviceServiceClient) Create(ctx context.Context, req *device.CreateDeviceRequst, callOptions ...callopt.Option) (r *device.CreateDeviceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Create(ctx, req)
}

func (p *kDeviceServiceClient) Remove(ctx context.Context, req *device.RemoveDeviceRequst, callOptions ...callopt.Option) (r *device.RemoveDeviceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Remove(ctx, req)
}

func (p *kDeviceServiceClient) Update(ctx context.Context, req *device.UpdateDeviceRequst, callOptions ...callopt.Option) (r *device.UpdateDeviceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Update(ctx, req)
}

func (p *kDeviceServiceClient) GetDeviceByID(ctx context.Context, req *device.GetDeviceRequst, callOptions ...callopt.Option) (r *device.GetDeviceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDeviceByID(ctx, req)
}

func (p *kDeviceServiceClient) ListDevice(ctx context.Context, req *device.ListDeviceRequst, callOptions ...callopt.Option) (r *device.ListDeviceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDevice(ctx, req)
}
