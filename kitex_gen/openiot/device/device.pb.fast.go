// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package device

import (
	fmt "fmt"
	common "github.com/OpenIoT-Hub/openiot-server/kitex_gen/openiot/common"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *DeviceV1) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeviceV1[number], err)
}

func (x *DeviceV1) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Longitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Latitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Capacity, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Temperature, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Humidity, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CO2_CONC, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.SoundIntensity, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.State, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeviceV1) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Info, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Device) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Device[number], err)
}

func (x *Device) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Device) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Device) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Longitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Device) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Latitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Device) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Device) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.State, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Device) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Comment, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Device) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.External, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateDeviceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateDeviceReq[number], err)
}

func (x *CreateDeviceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Longitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CreateDeviceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Latitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CreateDeviceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateDeviceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.State, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateDeviceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Comment, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateDeviceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.External, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RemoveDeviceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveDeviceReq[number], err)
}

func (x *RemoveDeviceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateDeviceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateDeviceReq[number], err)
}

func (x *UpdateDeviceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *UpdateDeviceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.Longitude = &tmp
	return offset, err
}

func (x *UpdateDeviceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.Latitude = &tmp
	return offset, err
}

func (x *UpdateDeviceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Version = &tmp
	return offset, err
}

func (x *UpdateDeviceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.State = &tmp
	return offset, err
}

func (x *UpdateDeviceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Comment = &tmp
	return offset, err
}

func (x *UpdateDeviceReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.External = &tmp
	return offset, err
}

func (x *GetDeviceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetDeviceReq[number], err)
}

func (x *GetDeviceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListDeviceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateDeviceRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateDeviceRsp[number], err)
}

func (x *CreateDeviceRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseRsp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *RemoveDeviceRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveDeviceRsp[number], err)
}

func (x *RemoveDeviceRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseRsp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *UpdateDeviceRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateDeviceRsp[number], err)
}

func (x *UpdateDeviceRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseRsp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *GetDeviceRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetDeviceRsp[number], err)
}

func (x *GetDeviceRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseRsp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *GetDeviceRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Device
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Device = &v
	return offset, nil
}

func (x *ListDeviceRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListDeviceRsp[number], err)
}

func (x *ListDeviceRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseRsp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *ListDeviceRsp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Device
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Device = append(x.Device, &v)
	return offset, nil
}

func (x *DeviceV1) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *DeviceV1) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.ID)
	return offset
}

func (x *DeviceV1) fastWriteField2(buf []byte) (offset int) {
	if x.UpdatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.UpdatedAt)
	return offset
}

func (x *DeviceV1) fastWriteField3(buf []byte) (offset int) {
	if x.Longitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.Longitude)
	return offset
}

func (x *DeviceV1) fastWriteField4(buf []byte) (offset int) {
	if x.Latitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 4, x.Latitude)
	return offset
}

func (x *DeviceV1) fastWriteField5(buf []byte) (offset int) {
	if x.Capacity == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 5, x.Capacity)
	return offset
}

func (x *DeviceV1) fastWriteField6(buf []byte) (offset int) {
	if x.Temperature == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 6, x.Temperature)
	return offset
}

func (x *DeviceV1) fastWriteField7(buf []byte) (offset int) {
	if x.Humidity == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 7, x.Humidity)
	return offset
}

func (x *DeviceV1) fastWriteField8(buf []byte) (offset int) {
	if x.CO2_CONC == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 8, x.CO2_CONC)
	return offset
}

func (x *DeviceV1) fastWriteField9(buf []byte) (offset int) {
	if x.SoundIntensity == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 9, x.SoundIntensity)
	return offset
}

func (x *DeviceV1) fastWriteField10(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.State)
	return offset
}

func (x *DeviceV1) fastWriteField11(buf []byte) (offset int) {
	if x.Info == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.Info)
	return offset
}

func (x *Device) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Device) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.ID)
	return offset
}

func (x *Device) fastWriteField2(buf []byte) (offset int) {
	if x.UpdatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.UpdatedAt)
	return offset
}

func (x *Device) fastWriteField3(buf []byte) (offset int) {
	if x.Longitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.Longitude)
	return offset
}

func (x *Device) fastWriteField4(buf []byte) (offset int) {
	if x.Latitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 4, x.Latitude)
	return offset
}

func (x *Device) fastWriteField5(buf []byte) (offset int) {
	if x.Version == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.Version)
	return offset
}

func (x *Device) fastWriteField6(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.State)
	return offset
}

func (x *Device) fastWriteField7(buf []byte) (offset int) {
	if x.Comment == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.Comment)
	return offset
}

func (x *Device) fastWriteField8(buf []byte) (offset int) {
	if x.External == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.External)
	return offset
}

func (x *CreateDeviceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *CreateDeviceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Longitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 1, x.Longitude)
	return offset
}

func (x *CreateDeviceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Latitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.Latitude)
	return offset
}

func (x *CreateDeviceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Version == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.Version)
	return offset
}

func (x *CreateDeviceReq) fastWriteField4(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.State)
	return offset
}

func (x *CreateDeviceReq) fastWriteField5(buf []byte) (offset int) {
	if x.Comment == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.Comment)
	return offset
}

func (x *CreateDeviceReq) fastWriteField6(buf []byte) (offset int) {
	if x.External == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.External)
	return offset
}

func (x *RemoveDeviceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveDeviceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Id)
	return offset
}

func (x *UpdateDeviceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UpdateDeviceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, *x.Id)
	return offset
}

func (x *UpdateDeviceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Longitude == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, *x.Longitude)
	return offset
}

func (x *UpdateDeviceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Latitude == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, *x.Latitude)
	return offset
}

func (x *UpdateDeviceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Version == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, *x.Version)
	return offset
}

func (x *UpdateDeviceReq) fastWriteField5(buf []byte) (offset int) {
	if x.State == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, *x.State)
	return offset
}

func (x *UpdateDeviceReq) fastWriteField6(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, *x.Comment)
	return offset
}

func (x *UpdateDeviceReq) fastWriteField7(buf []byte) (offset int) {
	if x.External == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, *x.External)
	return offset
}

func (x *GetDeviceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetDeviceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Id)
	return offset
}

func (x *ListDeviceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateDeviceRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateDeviceRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Base)
	return offset
}

func (x *RemoveDeviceRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveDeviceRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Base)
	return offset
}

func (x *UpdateDeviceRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateDeviceRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Base)
	return offset
}

func (x *GetDeviceRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetDeviceRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Base)
	return offset
}

func (x *GetDeviceRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Device == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.Device)
	return offset
}

func (x *ListDeviceRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListDeviceRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Base)
	return offset
}

func (x *ListDeviceRsp) fastWriteField2(buf []byte) (offset int) {
	if x.Device == nil {
		return offset
	}
	for i := range x.Device {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.Device[i])
	}
	return offset
}

func (x *DeviceV1) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *DeviceV1) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.ID)
	return n
}

func (x *DeviceV1) sizeField2() (n int) {
	if x.UpdatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.UpdatedAt)
	return n
}

func (x *DeviceV1) sizeField3() (n int) {
	if x.Longitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.Longitude)
	return n
}

func (x *DeviceV1) sizeField4() (n int) {
	if x.Latitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(4, x.Latitude)
	return n
}

func (x *DeviceV1) sizeField5() (n int) {
	if x.Capacity == 0 {
		return n
	}
	n += fastpb.SizeDouble(5, x.Capacity)
	return n
}

func (x *DeviceV1) sizeField6() (n int) {
	if x.Temperature == 0 {
		return n
	}
	n += fastpb.SizeDouble(6, x.Temperature)
	return n
}

func (x *DeviceV1) sizeField7() (n int) {
	if x.Humidity == 0 {
		return n
	}
	n += fastpb.SizeDouble(7, x.Humidity)
	return n
}

func (x *DeviceV1) sizeField8() (n int) {
	if x.CO2_CONC == 0 {
		return n
	}
	n += fastpb.SizeDouble(8, x.CO2_CONC)
	return n
}

func (x *DeviceV1) sizeField9() (n int) {
	if x.SoundIntensity == 0 {
		return n
	}
	n += fastpb.SizeDouble(9, x.SoundIntensity)
	return n
}

func (x *DeviceV1) sizeField10() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.State)
	return n
}

func (x *DeviceV1) sizeField11() (n int) {
	if x.Info == "" {
		return n
	}
	n += fastpb.SizeString(11, x.Info)
	return n
}

func (x *Device) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Device) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.ID)
	return n
}

func (x *Device) sizeField2() (n int) {
	if x.UpdatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.UpdatedAt)
	return n
}

func (x *Device) sizeField3() (n int) {
	if x.Longitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.Longitude)
	return n
}

func (x *Device) sizeField4() (n int) {
	if x.Latitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(4, x.Latitude)
	return n
}

func (x *Device) sizeField5() (n int) {
	if x.Version == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.Version)
	return n
}

func (x *Device) sizeField6() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.State)
	return n
}

func (x *Device) sizeField7() (n int) {
	if x.Comment == "" {
		return n
	}
	n += fastpb.SizeString(7, x.Comment)
	return n
}

func (x *Device) sizeField8() (n int) {
	if x.External == "" {
		return n
	}
	n += fastpb.SizeString(8, x.External)
	return n
}

func (x *CreateDeviceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *CreateDeviceReq) sizeField1() (n int) {
	if x.Longitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(1, x.Longitude)
	return n
}

func (x *CreateDeviceReq) sizeField2() (n int) {
	if x.Latitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.Latitude)
	return n
}

func (x *CreateDeviceReq) sizeField3() (n int) {
	if x.Version == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.Version)
	return n
}

func (x *CreateDeviceReq) sizeField4() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.State)
	return n
}

func (x *CreateDeviceReq) sizeField5() (n int) {
	if x.Comment == "" {
		return n
	}
	n += fastpb.SizeString(5, x.Comment)
	return n
}

func (x *CreateDeviceReq) sizeField6() (n int) {
	if x.External == "" {
		return n
	}
	n += fastpb.SizeString(6, x.External)
	return n
}

func (x *RemoveDeviceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveDeviceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Id)
	return n
}

func (x *UpdateDeviceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UpdateDeviceReq) sizeField1() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(1, *x.Id)
	return n
}

func (x *UpdateDeviceReq) sizeField2() (n int) {
	if x.Longitude == nil {
		return n
	}
	n += fastpb.SizeDouble(2, *x.Longitude)
	return n
}

func (x *UpdateDeviceReq) sizeField3() (n int) {
	if x.Latitude == nil {
		return n
	}
	n += fastpb.SizeDouble(3, *x.Latitude)
	return n
}

func (x *UpdateDeviceReq) sizeField4() (n int) {
	if x.Version == nil {
		return n
	}
	n += fastpb.SizeInt64(4, *x.Version)
	return n
}

func (x *UpdateDeviceReq) sizeField5() (n int) {
	if x.State == nil {
		return n
	}
	n += fastpb.SizeInt64(5, *x.State)
	return n
}

func (x *UpdateDeviceReq) sizeField6() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeString(6, *x.Comment)
	return n
}

func (x *UpdateDeviceReq) sizeField7() (n int) {
	if x.External == nil {
		return n
	}
	n += fastpb.SizeString(7, *x.External)
	return n
}

func (x *GetDeviceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetDeviceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Id)
	return n
}

func (x *ListDeviceReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateDeviceRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateDeviceRsp) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Base)
	return n
}

func (x *RemoveDeviceRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveDeviceRsp) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Base)
	return n
}

func (x *UpdateDeviceRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateDeviceRsp) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Base)
	return n
}

func (x *GetDeviceRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetDeviceRsp) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Base)
	return n
}

func (x *GetDeviceRsp) sizeField2() (n int) {
	if x.Device == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.Device)
	return n
}

func (x *ListDeviceRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListDeviceRsp) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Base)
	return n
}

func (x *ListDeviceRsp) sizeField2() (n int) {
	if x.Device == nil {
		return n
	}
	for i := range x.Device {
		n += fastpb.SizeMessage(2, x.Device[i])
	}
	return n
}

var fieldIDToName_DeviceV1 = map[int32]string{
	1:  "ID",
	2:  "UpdatedAt",
	3:  "Longitude",
	4:  "Latitude",
	5:  "Capacity",
	6:  "Temperature",
	7:  "Humidity",
	8:  "CO2_CONC",
	9:  "SoundIntensity",
	10: "State",
	11: "Info",
}

var fieldIDToName_Device = map[int32]string{
	1: "ID",
	2: "UpdatedAt",
	3: "Longitude",
	4: "Latitude",
	5: "Version",
	6: "State",
	7: "Comment",
	8: "External",
}

var fieldIDToName_CreateDeviceReq = map[int32]string{
	1: "Longitude",
	2: "Latitude",
	3: "Version",
	4: "State",
	5: "Comment",
	6: "External",
}

var fieldIDToName_RemoveDeviceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_UpdateDeviceReq = map[int32]string{
	1: "Id",
	2: "Longitude",
	3: "Latitude",
	4: "Version",
	5: "State",
	6: "Comment",
	7: "External",
}

var fieldIDToName_GetDeviceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_ListDeviceReq = map[int32]string{}

var fieldIDToName_CreateDeviceRsp = map[int32]string{
	1: "Base",
}

var fieldIDToName_RemoveDeviceRsp = map[int32]string{
	1: "Base",
}

var fieldIDToName_UpdateDeviceRsp = map[int32]string{
	1: "Base",
}

var fieldIDToName_GetDeviceRsp = map[int32]string{
	1: "Base",
	2: "Device",
}

var fieldIDToName_ListDeviceRsp = map[int32]string{
	1: "Base",
	2: "Device",
}

// var _ = common.File_common_proto
