syntax = "proto3";

package api;

option go_package = "openiot/service";

import "api.proto";
import "devicemsg.proto";
import "usermsg.proto";

// 用户接口
service OpeniotUserService {
    // interact with user table.
    rpc CreateUser(CreateUserReq) returns (CreateUserRsp) {
        option (api.post) = "/api/v1/user";
    }
    rpc RemoveUser(RemoveUserReq) returns (RemoveUserRsp) {
        option (api.delete) = "/api/v1/user/{id}";
    }
    rpc UpdateUser(UpdateUserReq) returns (UpdateUserRsp) {
        option (api.put) = "/api/v1/user/{id}";
    }

    // interact with both user table and organization table.
    rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoRsp){
        option (api.get) = "/api/v1/user/{id}";
    };
    rpc ListUserInfo(ListUserInfoReq) returns (ListUserInfoRsp) {
        option (api.get) = "/api/v1/user";
    }
}
// 设备接口
service OpeniotDeviceService {
    // ListDevice 获取设备列表
    rpc ListDevice(UpdateDeviceReq) returns (ListDeviceRsp) {
        option (api.get) = "api/v1/device";
    }
    // CreateDevice 添加新设备
    rpc CreateDevice(CreateDeviceReq) returns (CreateDeviceRsp) {
        option (api.post) = "/api/v1/device";
    }
    // RemoveDevice 从数据库中移除设备
    rpc RemoveDevice(RemoveDeviceReq) returns (RemoveDeviceRsp) {
        option (api.delete) = "api/v1/device/{id}";
    }
    // UpdateDevice 更新设备信息
    rpc UpdateDevice(UpdateDeviceReq) returns (UpdateDeviceRsp) {
        option (api.post) = "api/v1/device/{id}";
    }
    // GetDevice 通过 ID 获取指定设备信息
    rpc GetDevice(GetDeviceReq) returns (GetDeviceRsp) {
        option (api.get) = "api/v1/device/{id}";
    }
}