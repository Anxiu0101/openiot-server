// Code generated by hertz generator.

package api

import (
	"context"

	api "github.com/OpenIoT-Hub/openiot-server/api-gateway/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserRegisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserLoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /user/info [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserInfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// Ping .
// @router /device/ping [GET]
func Ping(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DevicePingRequst
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DevicePingResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeviceCreate .
// @router /device/ [POST]
func DeviceCreate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CreateDeviceRequst
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.CreateDeviceResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeviceRemove .
// @router /device/info [DELETE]
func DeviceRemove(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RemoveDeviceRequst
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RemoveDeviceResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeviceUpdate .
// @router /device/info [POST]
func DeviceUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateDeviceRequst
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateDeviceResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetDeviceByID .
// @router /device/info [GET]
func GetDeviceByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetDeviceRequst
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetDeviceResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListDevice .
// @router /device/list [GET]
func ListDevice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListDeviceRequst
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.ListDeviceResponse)

	c.JSON(consts.StatusOK, resp)
}
